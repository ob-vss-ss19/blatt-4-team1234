// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: movieservice/proto/movie/movie.proto

package movie

import (
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Movie struct {
	Id    int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Fsk   int64  `protobuf:"varint,3,opt,name=Fsk,proto3" json:"Fsk,omitempty"`
}

func (m *Movie) Reset()      { *m = Movie{} }
func (*Movie) ProtoMessage() {}
func (*Movie) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{0}
}
func (m *Movie) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Movie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Movie.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Movie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Movie.Merge(m, src)
}
func (m *Movie) XXX_Size() int {
	return m.Size()
}
func (m *Movie) XXX_DiscardUnknown() {
	xxx_messageInfo_Movie.DiscardUnknown(m)
}

var xxx_messageInfo_Movie proto.InternalMessageInfo

func (m *Movie) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Movie) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Movie) GetFsk() int64 {
	if m != nil {
		return m.Fsk
	}
	return 0
}

type GetAllMoviesRequest struct {
}

func (m *GetAllMoviesRequest) Reset()      { *m = GetAllMoviesRequest{} }
func (*GetAllMoviesRequest) ProtoMessage() {}
func (*GetAllMoviesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{1}
}
func (m *GetAllMoviesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllMoviesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllMoviesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllMoviesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMoviesRequest.Merge(m, src)
}
func (m *GetAllMoviesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllMoviesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMoviesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMoviesRequest proto.InternalMessageInfo

type GetAllMoviesResponse struct {
	Movies []*Movie `protobuf:"bytes,1,rep,name=Movies,proto3" json:"Movies,omitempty"`
}

func (m *GetAllMoviesResponse) Reset()      { *m = GetAllMoviesResponse{} }
func (*GetAllMoviesResponse) ProtoMessage() {}
func (*GetAllMoviesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{2}
}
func (m *GetAllMoviesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllMoviesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllMoviesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllMoviesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMoviesResponse.Merge(m, src)
}
func (m *GetAllMoviesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllMoviesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMoviesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMoviesResponse proto.InternalMessageInfo

func (m *GetAllMoviesResponse) GetMovies() []*Movie {
	if m != nil {
		return m.Movies
	}
	return nil
}

type GetMovieRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GetMovieRequest) Reset()      { *m = GetMovieRequest{} }
func (*GetMovieRequest) ProtoMessage() {}
func (*GetMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{3}
}
func (m *GetMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMovieRequest.Merge(m, src)
}
func (m *GetMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMovieRequest proto.InternalMessageInfo

func (m *GetMovieRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetMovieResponse struct {
	Movie *Movie `protobuf:"bytes,1,opt,name=Movie,proto3" json:"Movie,omitempty"`
}

func (m *GetMovieResponse) Reset()      { *m = GetMovieResponse{} }
func (*GetMovieResponse) ProtoMessage() {}
func (*GetMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{4}
}
func (m *GetMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMovieResponse.Merge(m, src)
}
func (m *GetMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMovieResponse proto.InternalMessageInfo

func (m *GetMovieResponse) GetMovie() *Movie {
	if m != nil {
		return m.Movie
	}
	return nil
}

type AddMovieRequest struct {
	Movie *Movie `protobuf:"bytes,1,opt,name=Movie,proto3" json:"Movie,omitempty"`
}

func (m *AddMovieRequest) Reset()      { *m = AddMovieRequest{} }
func (*AddMovieRequest) ProtoMessage() {}
func (*AddMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{5}
}
func (m *AddMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMovieRequest.Merge(m, src)
}
func (m *AddMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddMovieRequest proto.InternalMessageInfo

func (m *AddMovieRequest) GetMovie() *Movie {
	if m != nil {
		return m.Movie
	}
	return nil
}

type AddMovieResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *AddMovieResponse) Reset()      { *m = AddMovieResponse{} }
func (*AddMovieResponse) ProtoMessage() {}
func (*AddMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{6}
}
func (m *AddMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMovieResponse.Merge(m, src)
}
func (m *AddMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddMovieResponse proto.InternalMessageInfo

func (m *AddMovieResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveMovieRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *RemoveMovieRequest) Reset()      { *m = RemoveMovieRequest{} }
func (*RemoveMovieRequest) ProtoMessage() {}
func (*RemoveMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{7}
}
func (m *RemoveMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMovieRequest.Merge(m, src)
}
func (m *RemoveMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMovieRequest proto.InternalMessageInfo

func (m *RemoveMovieRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveMovieResponse struct {
}

func (m *RemoveMovieResponse) Reset()      { *m = RemoveMovieResponse{} }
func (*RemoveMovieResponse) ProtoMessage() {}
func (*RemoveMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07733c7a2f7e28e6, []int{8}
}
func (m *RemoveMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMovieResponse.Merge(m, src)
}
func (m *RemoveMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMovieResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Movie)(nil), "movie.Movie")
	proto.RegisterType((*GetAllMoviesRequest)(nil), "movie.GetAllMoviesRequest")
	proto.RegisterType((*GetAllMoviesResponse)(nil), "movie.GetAllMoviesResponse")
	proto.RegisterType((*GetMovieRequest)(nil), "movie.GetMovieRequest")
	proto.RegisterType((*GetMovieResponse)(nil), "movie.GetMovieResponse")
	proto.RegisterType((*AddMovieRequest)(nil), "movie.AddMovieRequest")
	proto.RegisterType((*AddMovieResponse)(nil), "movie.AddMovieResponse")
	proto.RegisterType((*RemoveMovieRequest)(nil), "movie.RemoveMovieRequest")
	proto.RegisterType((*RemoveMovieResponse)(nil), "movie.RemoveMovieResponse")
}

func init() {
	proto.RegisterFile("movieservice/proto/movie/movie.proto", fileDescriptor_07733c7a2f7e28e6)
}

var fileDescriptor_07733c7a2f7e28e6 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xbd, 0x4e, 0x32, 0x41,
	0x14, 0x9d, 0xd9, 0x0d, 0xe4, 0xfb, 0x2e, 0x44, 0xc8, 0x00, 0xba, 0xae, 0xc9, 0x0d, 0x4e, 0x28,
	0xa8, 0x20, 0xc1, 0x9f, 0x4a, 0x63, 0xb0, 0x80, 0x50, 0xd8, 0xac, 0x3e, 0x81, 0xee, 0x14, 0x44,
	0x70, 0x91, 0x5d, 0xa9, 0x7d, 0x04, 0xdf, 0xc0, 0xd6, 0x47, 0xb1, 0xa4, 0xa4, 0x94, 0xa1, 0xb1,
	0xe4, 0x11, 0x0c, 0x33, 0x03, 0x2c, 0x0b, 0x31, 0x36, 0x9b, 0x99, 0x73, 0xcf, 0x39, 0x7b, 0xee,
	0xd9, 0x85, 0x4a, 0x3f, 0x18, 0x75, 0x45, 0x28, 0x86, 0xa3, 0xee, 0x83, 0xa8, 0x0f, 0x86, 0x41,
	0x14, 0xd4, 0x15, 0xa4, 0x9f, 0x35, 0x85, 0xb0, 0x94, 0xba, 0xf0, 0x2b, 0x48, 0xdd, 0x2c, 0x0e,
	0x6c, 0x0f, 0xac, 0x8e, 0xef, 0xd0, 0x32, 0xad, 0xda, 0x9e, 0xd5, 0xf1, 0x59, 0x11, 0x52, 0x77,
	0xdd, 0xa8, 0x27, 0x1c, 0xab, 0x4c, 0xab, 0xff, 0x3d, 0x7d, 0x61, 0x79, 0xb0, 0x5b, 0xe1, 0xa3,
	0x63, 0x2b, 0xda, 0xe2, 0xc8, 0x4b, 0x50, 0x68, 0x8b, 0xa8, 0xd9, 0xeb, 0x29, 0x9b, 0xd0, 0x13,
	0xcf, 0x2f, 0x22, 0x8c, 0xf8, 0x05, 0x14, 0x37, 0xe1, 0x70, 0x10, 0x3c, 0x85, 0x82, 0x55, 0x20,
	0xad, 0x11, 0x87, 0x96, 0xed, 0x6a, 0xa6, 0x91, 0xad, 0xe9, 0x50, 0x0a, 0xf4, 0xcc, 0x8c, 0x1f,
	0x43, 0xae, 0x2d, 0x22, 0x8d, 0x69, 0xc3, 0x64, 0x3e, 0x7e, 0x0e, 0xf9, 0x35, 0xc5, 0x98, 0x73,
	0xb3, 0x8c, 0xa2, 0x25, 0xbd, 0xf5, 0x88, 0x9f, 0x41, 0xae, 0xe9, 0xfb, 0x1b, 0xd6, 0x7f, 0x91,
	0x71, 0xc8, 0xaf, 0x65, 0xe6, 0x75, 0xc9, 0x48, 0x15, 0x60, 0x9e, 0xe8, 0x07, 0x23, 0xf1, 0x6b,
	0xf0, 0x12, 0x14, 0x36, 0x58, 0xda, 0xac, 0xf1, 0x6e, 0x41, 0x56, 0x21, 0xb7, 0xfa, 0xc3, 0xb1,
	0x0e, 0x64, 0xe3, 0x0d, 0x32, 0xd7, 0xc4, 0xda, 0xd1, 0xb6, 0x7b, 0xb4, 0x73, 0xa6, 0x9d, 0x39,
	0x61, 0x97, 0xf0, 0x6f, 0xd9, 0x15, 0xdb, 0x5f, 0x53, 0xe3, 0x31, 0xdd, 0x83, 0x2d, 0x3c, 0x2e,
	0x5f, 0xee, 0xbe, 0x92, 0x27, 0x3a, 0x5c, 0xc9, 0x93, 0x25, 0x71, 0xc2, 0x5a, 0x90, 0x89, 0x2d,
	0xcc, 0x0e, 0x0d, 0x73, 0xbb, 0x2a, 0xd7, 0xdd, 0x35, 0x5a, 0xfa, 0x5c, 0x9f, 0x8e, 0xa7, 0x48,
	0x26, 0x53, 0x24, 0xf3, 0x29, 0xd2, 0x57, 0x89, 0xf4, 0x43, 0x22, 0xfd, 0x94, 0x48, 0xc7, 0x12,
	0xe9, 0x97, 0x44, 0xfa, 0x2d, 0x91, 0xcc, 0x25, 0xd2, 0xb7, 0x19, 0x92, 0xf1, 0x0c, 0xc9, 0x64,
	0x86, 0xe4, 0x3e, 0xad, 0x7e, 0xf7, 0x93, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x85, 0x92,
	0x9a, 0x16, 0x03, 0x00, 0x00,
}

func (this *Movie) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Movie)
	if !ok {
		that2, ok := that.(Movie)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Fsk != that1.Fsk {
		return false
	}
	return true
}
func (this *GetAllMoviesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllMoviesRequest)
	if !ok {
		that2, ok := that.(GetAllMoviesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAllMoviesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllMoviesResponse)
	if !ok {
		that2, ok := that.(GetAllMoviesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Movies) != len(that1.Movies) {
		return false
	}
	for i := range this.Movies {
		if !this.Movies[i].Equal(that1.Movies[i]) {
			return false
		}
	}
	return true
}
func (this *GetMovieRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMovieRequest)
	if !ok {
		that2, ok := that.(GetMovieRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetMovieResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetMovieResponse)
	if !ok {
		that2, ok := that.(GetMovieResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Movie.Equal(that1.Movie) {
		return false
	}
	return true
}
func (this *AddMovieRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddMovieRequest)
	if !ok {
		that2, ok := that.(AddMovieRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Movie.Equal(that1.Movie) {
		return false
	}
	return true
}
func (this *AddMovieResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddMovieResponse)
	if !ok {
		that2, ok := that.(AddMovieResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RemoveMovieRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveMovieRequest)
	if !ok {
		that2, ok := that.(RemoveMovieRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RemoveMovieResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveMovieResponse)
	if !ok {
		that2, ok := that.(RemoveMovieResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Movie) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&movie.Movie{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Fsk: "+fmt.Sprintf("%#v", this.Fsk)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllMoviesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&movie.GetAllMoviesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllMoviesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&movie.GetAllMoviesResponse{")
	if this.Movies != nil {
		s = append(s, "Movies: "+fmt.Sprintf("%#v", this.Movies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMovieRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&movie.GetMovieRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetMovieResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&movie.GetMovieResponse{")
	if this.Movie != nil {
		s = append(s, "Movie: "+fmt.Sprintf("%#v", this.Movie)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddMovieRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&movie.AddMovieRequest{")
	if this.Movie != nil {
		s = append(s, "Movie: "+fmt.Sprintf("%#v", this.Movie)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddMovieResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&movie.AddMovieResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveMovieRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&movie.RemoveMovieRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveMovieResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&movie.RemoveMovieResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMovie(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Movie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Movie) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMovie(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Fsk != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMovie(dAtA, i, uint64(m.Fsk))
	}
	return i, nil
}

func (m *GetAllMoviesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMoviesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAllMoviesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMoviesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Movies) > 0 {
		for _, msg := range m.Movies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMovie(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMovie(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Movie != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMovie(dAtA, i, uint64(m.Movie.Size()))
		n1, err1 := m.Movie.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *AddMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Movie != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMovie(dAtA, i, uint64(m.Movie.Size()))
		n2, err2 := m.Movie.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *AddMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMovie(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RemoveMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMovie(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RemoveMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintMovie(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Movie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovie(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	if m.Fsk != 0 {
		n += 1 + sovMovie(uint64(m.Fsk))
	}
	return n
}

func (m *GetAllMoviesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllMoviesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Movies) > 0 {
		for _, e := range m.Movies {
			l = e.Size()
			n += 1 + l + sovMovie(uint64(l))
		}
	}
	return n
}

func (m *GetMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovie(uint64(m.Id))
	}
	return n
}

func (m *GetMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Movie != nil {
		l = m.Movie.Size()
		n += 1 + l + sovMovie(uint64(l))
	}
	return n
}

func (m *AddMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Movie != nil {
		l = m.Movie.Size()
		n += 1 + l + sovMovie(uint64(l))
	}
	return n
}

func (m *AddMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovie(uint64(m.Id))
	}
	return n
}

func (m *RemoveMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovie(uint64(m.Id))
	}
	return n
}

func (m *RemoveMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMovie(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMovie(x uint64) (n int) {
	return sovMovie(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Movie) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Movie{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Fsk:` + fmt.Sprintf("%v", this.Fsk) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAllMoviesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAllMoviesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetAllMoviesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMovies := "[]*Movie{"
	for _, f := range this.Movies {
		repeatedStringForMovies += strings.Replace(f.String(), "Movie", "Movie", 1) + ","
	}
	repeatedStringForMovies += "}"
	s := strings.Join([]string{`&GetAllMoviesResponse{`,
		`Movies:` + repeatedStringForMovies + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMovieRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMovieRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetMovieResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetMovieResponse{`,
		`Movie:` + strings.Replace(this.Movie.String(), "Movie", "Movie", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddMovieRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddMovieRequest{`,
		`Movie:` + strings.Replace(this.Movie.String(), "Movie", "Movie", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddMovieResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddMovieResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveMovieRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveMovieRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveMovieResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveMovieResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringMovie(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Movie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Movie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Movie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fsk", wireType)
			}
			m.Fsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fsk |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMoviesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllMoviesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllMoviesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMoviesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllMoviesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllMoviesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Movies = append(m.Movies, &Movie{})
			if err := m.Movies[len(m.Movies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Movie == nil {
				m.Movie = &Movie{}
			}
			if err := m.Movie.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Movie == nil {
				m.Movie = &Movie{}
			}
			if err := m.Movie.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMovie(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMovie
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMovie
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMovie
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMovie(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMovie
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMovie = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMovie   = fmt.Errorf("proto: integer overflow")
)
