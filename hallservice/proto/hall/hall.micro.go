// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: hallservice/proto/hall/hall.proto

package hall

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

import (
	context "context"

	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HallService service

type HallService interface {
	GetAllHalls(ctx context.Context, in *GetAllHallsRequest, opts ...client.CallOption) (*GetAllHallsResponse, error)
	GetHall(ctx context.Context, in *GetHallRequest, opts ...client.CallOption) (*GetHallResponse, error)
	AddHall(ctx context.Context, in *AddHallRequest, opts ...client.CallOption) (*AddHallResponse, error)
	RemoveHall(ctx context.Context, in *RemoveHallRequest, opts ...client.CallOption) (*RemoveHallResponse, error)
}

type hallService struct {
	c    client.Client
	name string
}

func NewHallService(name string, c client.Client) HallService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "hall"
	}
	return &hallService{
		c:    c,
		name: name,
	}
}

func (c *hallService) GetAllHalls(ctx context.Context, in *GetAllHallsRequest, opts ...client.CallOption) (*GetAllHallsResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.GetAllHalls", in)
	out := new(GetAllHallsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallService) GetHall(ctx context.Context, in *GetHallRequest, opts ...client.CallOption) (*GetHallResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.GetHall", in)
	out := new(GetHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallService) AddHall(ctx context.Context, in *AddHallRequest, opts ...client.CallOption) (*AddHallResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.AddHall", in)
	out := new(AddHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallService) RemoveHall(ctx context.Context, in *RemoveHallRequest, opts ...client.CallOption) (*RemoveHallResponse, error) {
	req := c.c.NewRequest(c.name, "HallService.RemoveHall", in)
	out := new(RemoveHallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HallService service

type HallServiceHandler interface {
	GetAllHalls(context.Context, *GetAllHallsRequest, *GetAllHallsResponse) error
	GetHall(context.Context, *GetHallRequest, *GetHallResponse) error
	AddHall(context.Context, *AddHallRequest, *AddHallResponse) error
	RemoveHall(context.Context, *RemoveHallRequest, *RemoveHallResponse) error
}

func RegisterHallServiceHandler(s server.Server, hdlr HallServiceHandler, opts ...server.HandlerOption) error {
	type hallService interface {
		GetAllHalls(ctx context.Context, in *GetAllHallsRequest, out *GetAllHallsResponse) error
		GetHall(ctx context.Context, in *GetHallRequest, out *GetHallResponse) error
		AddHall(ctx context.Context, in *AddHallRequest, out *AddHallResponse) error
		RemoveHall(ctx context.Context, in *RemoveHallRequest, out *RemoveHallResponse) error
	}
	type HallService struct {
		hallService
	}
	h := &hallServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HallService{h}, opts...))
}

type hallServiceHandler struct {
	HallServiceHandler
}

func (h *hallServiceHandler) GetAllHalls(ctx context.Context, in *GetAllHallsRequest, out *GetAllHallsResponse) error {
	return h.HallServiceHandler.GetAllHalls(ctx, in, out)
}

func (h *hallServiceHandler) GetHall(ctx context.Context, in *GetHallRequest, out *GetHallResponse) error {
	return h.HallServiceHandler.GetHall(ctx, in, out)
}

func (h *hallServiceHandler) AddHall(ctx context.Context, in *AddHallRequest, out *AddHallResponse) error {
	return h.HallServiceHandler.AddHall(ctx, in, out)
}

func (h *hallServiceHandler) RemoveHall(ctx context.Context, in *RemoveHallRequest, out *RemoveHallResponse) error {
	return h.HallServiceHandler.RemoveHall(ctx, in, out)
}
