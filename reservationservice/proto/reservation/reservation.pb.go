// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reservationservice/proto/reservation/reservation.proto

package reservation

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Reservation struct {
	Id     int64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId int64   `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ShowId int64   `protobuf:"varint,3,opt,name=ShowId,proto3" json:"ShowId,omitempty"`
	Seats  []*Seat `protobuf:"bytes,4,rep,name=Seats,proto3" json:"Seats,omitempty"`
}

func (m *Reservation) Reset()      { *m = Reservation{} }
func (*Reservation) ProtoMessage() {}
func (*Reservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{0}
}
func (m *Reservation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reservation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reservation.Merge(m, src)
}
func (m *Reservation) XXX_Size() int {
	return m.Size()
}
func (m *Reservation) XXX_DiscardUnknown() {
	xxx_messageInfo_Reservation.DiscardUnknown(m)
}

var xxx_messageInfo_Reservation proto.InternalMessageInfo

func (m *Reservation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Reservation) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Reservation) GetShowId() int64 {
	if m != nil {
		return m.ShowId
	}
	return 0
}

func (m *Reservation) GetSeats() []*Seat {
	if m != nil {
		return m.Seats
	}
	return nil
}

type Seat struct {
	Row    int64 `protobuf:"varint,1,opt,name=Row,proto3" json:"Row,omitempty"`
	Column int64 `protobuf:"varint,2,opt,name=Column,proto3" json:"Column,omitempty"`
}

func (m *Seat) Reset()      { *m = Seat{} }
func (*Seat) ProtoMessage() {}
func (*Seat) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{1}
}
func (m *Seat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Seat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Seat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Seat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seat.Merge(m, src)
}
func (m *Seat) XXX_Size() int {
	return m.Size()
}
func (m *Seat) XXX_DiscardUnknown() {
	xxx_messageInfo_Seat.DiscardUnknown(m)
}

var xxx_messageInfo_Seat proto.InternalMessageInfo

func (m *Seat) GetRow() int64 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *Seat) GetColumn() int64 {
	if m != nil {
		return m.Column
	}
	return 0
}

type GetAllReservationsRequest struct {
}

func (m *GetAllReservationsRequest) Reset()      { *m = GetAllReservationsRequest{} }
func (*GetAllReservationsRequest) ProtoMessage() {}
func (*GetAllReservationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{2}
}
func (m *GetAllReservationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReservationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReservationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReservationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReservationsRequest.Merge(m, src)
}
func (m *GetAllReservationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReservationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReservationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReservationsRequest proto.InternalMessageInfo

type GetAllReservationsResponse struct {
	Reservations []*Reservation `protobuf:"bytes,1,rep,name=Reservations,proto3" json:"Reservations,omitempty"`
}

func (m *GetAllReservationsResponse) Reset()      { *m = GetAllReservationsResponse{} }
func (*GetAllReservationsResponse) ProtoMessage() {}
func (*GetAllReservationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{3}
}
func (m *GetAllReservationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReservationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReservationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReservationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReservationsResponse.Merge(m, src)
}
func (m *GetAllReservationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReservationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReservationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReservationsResponse proto.InternalMessageInfo

func (m *GetAllReservationsResponse) GetReservations() []*Reservation {
	if m != nil {
		return m.Reservations
	}
	return nil
}

type GetReservationRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GetReservationRequest) Reset()      { *m = GetReservationRequest{} }
func (*GetReservationRequest) ProtoMessage() {}
func (*GetReservationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{4}
}
func (m *GetReservationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReservationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReservationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReservationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReservationRequest.Merge(m, src)
}
func (m *GetReservationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReservationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReservationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReservationRequest proto.InternalMessageInfo

func (m *GetReservationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetReservationResponse struct {
	Reservation *Reservation `protobuf:"bytes,1,opt,name=Reservation,proto3" json:"Reservation,omitempty"`
}

func (m *GetReservationResponse) Reset()      { *m = GetReservationResponse{} }
func (*GetReservationResponse) ProtoMessage() {}
func (*GetReservationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{5}
}
func (m *GetReservationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReservationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReservationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReservationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReservationResponse.Merge(m, src)
}
func (m *GetReservationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReservationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReservationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReservationResponse proto.InternalMessageInfo

func (m *GetReservationResponse) GetReservation() *Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

type AddReservationRequest struct {
	Reservation *Reservation `protobuf:"bytes,1,opt,name=reservation,proto3" json:"reservation,omitempty"`
}

func (m *AddReservationRequest) Reset()      { *m = AddReservationRequest{} }
func (*AddReservationRequest) ProtoMessage() {}
func (*AddReservationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{6}
}
func (m *AddReservationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReservationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReservationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReservationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReservationRequest.Merge(m, src)
}
func (m *AddReservationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddReservationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReservationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddReservationRequest proto.InternalMessageInfo

func (m *AddReservationRequest) GetReservation() *Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

type AddReservationResponse struct {
}

func (m *AddReservationResponse) Reset()      { *m = AddReservationResponse{} }
func (*AddReservationResponse) ProtoMessage() {}
func (*AddReservationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{7}
}
func (m *AddReservationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReservationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReservationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReservationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReservationResponse.Merge(m, src)
}
func (m *AddReservationResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddReservationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReservationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddReservationResponse proto.InternalMessageInfo

type RemoveReservationRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *RemoveReservationRequest) Reset()      { *m = RemoveReservationRequest{} }
func (*RemoveReservationRequest) ProtoMessage() {}
func (*RemoveReservationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{8}
}
func (m *RemoveReservationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveReservationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveReservationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveReservationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveReservationRequest.Merge(m, src)
}
func (m *RemoveReservationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveReservationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveReservationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveReservationRequest proto.InternalMessageInfo

func (m *RemoveReservationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveReservationResponse struct {
}

func (m *RemoveReservationResponse) Reset()      { *m = RemoveReservationResponse{} }
func (*RemoveReservationResponse) ProtoMessage() {}
func (*RemoveReservationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9340195c3dda32e, []int{9}
}
func (m *RemoveReservationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveReservationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveReservationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveReservationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveReservationResponse.Merge(m, src)
}
func (m *RemoveReservationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveReservationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveReservationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveReservationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Reservation)(nil), "reservation.Reservation")
	proto.RegisterType((*Seat)(nil), "reservation.Seat")
	proto.RegisterType((*GetAllReservationsRequest)(nil), "reservation.GetAllReservationsRequest")
	proto.RegisterType((*GetAllReservationsResponse)(nil), "reservation.GetAllReservationsResponse")
	proto.RegisterType((*GetReservationRequest)(nil), "reservation.GetReservationRequest")
	proto.RegisterType((*GetReservationResponse)(nil), "reservation.GetReservationResponse")
	proto.RegisterType((*AddReservationRequest)(nil), "reservation.AddReservationRequest")
	proto.RegisterType((*AddReservationResponse)(nil), "reservation.AddReservationResponse")
	proto.RegisterType((*RemoveReservationRequest)(nil), "reservation.RemoveReservationRequest")
	proto.RegisterType((*RemoveReservationResponse)(nil), "reservation.RemoveReservationResponse")
}

func init() {
	proto.RegisterFile("reservationservice/proto/reservation/reservation.proto", fileDescriptor_f9340195c3dda32e)
}

var fileDescriptor_f9340195c3dda32e = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xbd, 0x8e, 0xda, 0x40,
	0x10, 0xde, 0xc5, 0x84, 0x62, 0x88, 0x50, 0x58, 0x09, 0xb4, 0x18, 0x69, 0x85, 0x36, 0x0a, 0xa0,
	0x14, 0x10, 0x91, 0x28, 0x05, 0x4a, 0x43, 0x52, 0x20, 0xb7, 0x76, 0xaa, 0xa4, 0x22, 0xf1, 0xea,
	0x0e, 0x09, 0x30, 0x67, 0x1b, 0x68, 0xef, 0x11, 0xee, 0x05, 0xae, 0xbf, 0x47, 0xb9, 0x92, 0x92,
	0xf2, 0x30, 0xcd, 0x95, 0x3c, 0xc2, 0xc9, 0x5e, 0xa3, 0x5b, 0x1b, 0x03, 0xd7, 0xcd, 0xcf, 0xb7,
	0xdf, 0x37, 0x33, 0x9f, 0x65, 0xf8, 0xee, 0x0a, 0x4f, 0xb8, 0xcb, 0x91, 0x3f, 0x76, 0x66, 0x61,
	0x30, 0xfe, 0x2f, 0xba, 0x73, 0xd7, 0xf1, 0x9d, 0xae, 0xd2, 0x50, 0xe3, 0x4e, 0xd4, 0x25, 0x45,
	0xa5, 0xc4, 0x97, 0x50, 0x34, 0x5f, 0x53, 0x52, 0x82, 0x9c, 0x61, 0x53, 0xdc, 0xc0, 0x6d, 0xcd,
	0xcc, 0x19, 0x36, 0xa9, 0x42, 0x61, 0xe1, 0x09, 0xd7, 0xb0, 0x69, 0x2e, 0xaa, 0xc5, 0x59, 0x58,
	0xb7, 0xae, 0x9d, 0x95, 0x61, 0x53, 0x4d, 0xd6, 0x65, 0x46, 0x5a, 0xf0, 0xce, 0x12, 0x23, 0xdf,
	0xa3, 0xf9, 0x86, 0xd6, 0x2e, 0xf6, 0xca, 0x1d, 0x55, 0x3e, 0xec, 0x98, 0xb2, 0xcf, 0xbf, 0x40,
	0x3e, 0x0c, 0xc8, 0x07, 0xd0, 0x4c, 0x67, 0x15, 0x2b, 0x86, 0x61, 0x48, 0xfd, 0xcb, 0x99, 0x2c,
	0xa6, 0xb3, 0x83, 0xa4, 0xcc, 0x78, 0x1d, 0x6a, 0x43, 0xe1, 0x0f, 0x26, 0x13, 0x65, 0x5e, 0xcf,
	0x14, 0x37, 0x0b, 0xe1, 0xf9, 0xfc, 0x0f, 0xe8, 0x59, 0x4d, 0x6f, 0x1e, 0x9e, 0x86, 0xfc, 0x80,
	0xf7, 0x6a, 0x9d, 0xe2, 0x68, 0x38, 0x9a, 0x18, 0x4e, 0x01, 0x98, 0x09, 0x34, 0x6f, 0x41, 0x65,
	0x28, 0x7c, 0xb5, 0x2f, 0x45, 0xd3, 0xc7, 0xe2, 0xbf, 0xa1, 0x9a, 0x06, 0xc6, 0x03, 0xf4, 0x13,
	0x57, 0x8e, 0x9e, 0x9c, 0xd3, 0x57, 0xc1, 0xdc, 0x82, 0xca, 0xc0, 0xb6, 0x33, 0xe4, 0xfb, 0xa0,
	0x3a, 0x79, 0x99, 0x54, 0xb5, 0x9d, 0x42, 0x35, 0x4d, 0x2a, 0x47, 0xe5, 0x9f, 0x81, 0x9a, 0x62,
	0xea, 0x2c, 0xc5, 0x1b, 0x16, 0xae, 0x43, 0x2d, 0x03, 0x2b, 0x89, 0x7a, 0xf7, 0x1a, 0x10, 0xa5,
	0x6e, 0xc9, 0x2f, 0x94, 0x5c, 0x01, 0x39, 0x76, 0x8a, 0x34, 0x13, 0x63, 0x9f, 0xf4, 0x59, 0x6f,
	0x5d, 0xc4, 0xc5, 0x6b, 0x20, 0xf2, 0x17, 0x4a, 0x49, 0x37, 0x08, 0x4f, 0x3f, 0x3e, 0x5e, 0x51,
	0xff, 0x78, 0x16, 0xa3, 0x92, 0x27, 0xef, 0x97, 0x22, 0xcf, 0x74, 0x2c, 0x45, 0x7e, 0xc2, 0x00,
	0x44, 0x6c, 0x28, 0x1f, 0x9d, 0x95, 0x7c, 0x4a, 0x19, 0x9b, 0x6d, 0x91, 0xde, 0xbc, 0x04, 0x3b,
	0xa8, 0xfc, 0xfc, 0xb6, 0xde, 0x32, 0xb4, 0xd9, 0x32, 0xb4, 0xdf, 0x32, 0x7c, 0x1b, 0x30, 0xfc,
	0x10, 0x30, 0xfc, 0x18, 0x30, 0xbc, 0x0e, 0x18, 0x7e, 0x0a, 0x18, 0x7e, 0x0e, 0x18, 0xda, 0x07,
	0x0c, 0xdf, 0xed, 0x18, 0x5a, 0xef, 0x18, 0xda, 0xec, 0x18, 0xfa, 0x57, 0x88, 0xfe, 0x21, 0x5f,
	0x5f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xec, 0x41, 0x79, 0x7d, 0x04, 0x00, 0x00,
}

func (this *Reservation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Reservation)
	if !ok {
		that2, ok := that.(Reservation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.ShowId != that1.ShowId {
		return false
	}
	if len(this.Seats) != len(that1.Seats) {
		return false
	}
	for i := range this.Seats {
		if !this.Seats[i].Equal(that1.Seats[i]) {
			return false
		}
	}
	return true
}
func (this *Seat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Seat)
	if !ok {
		that2, ok := that.(Seat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Row != that1.Row {
		return false
	}
	if this.Column != that1.Column {
		return false
	}
	return true
}
func (this *GetAllReservationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllReservationsRequest)
	if !ok {
		that2, ok := that.(GetAllReservationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAllReservationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllReservationsResponse)
	if !ok {
		that2, ok := that.(GetAllReservationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reservations) != len(that1.Reservations) {
		return false
	}
	for i := range this.Reservations {
		if !this.Reservations[i].Equal(that1.Reservations[i]) {
			return false
		}
	}
	return true
}
func (this *GetReservationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReservationRequest)
	if !ok {
		that2, ok := that.(GetReservationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetReservationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReservationResponse)
	if !ok {
		that2, ok := that.(GetReservationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reservation.Equal(that1.Reservation) {
		return false
	}
	return true
}
func (this *AddReservationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddReservationRequest)
	if !ok {
		that2, ok := that.(AddReservationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reservation.Equal(that1.Reservation) {
		return false
	}
	return true
}
func (this *AddReservationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddReservationResponse)
	if !ok {
		that2, ok := that.(AddReservationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveReservationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveReservationRequest)
	if !ok {
		that2, ok := that.(RemoveReservationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RemoveReservationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveReservationResponse)
	if !ok {
		that2, ok := that.(RemoveReservationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Reservation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&reservation.Reservation{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ShowId: "+fmt.Sprintf("%#v", this.ShowId)+",\n")
	if this.Seats != nil {
		s = append(s, "Seats: "+fmt.Sprintf("%#v", this.Seats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Seat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&reservation.Seat{")
	s = append(s, "Row: "+fmt.Sprintf("%#v", this.Row)+",\n")
	s = append(s, "Column: "+fmt.Sprintf("%#v", this.Column)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllReservationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&reservation.GetAllReservationsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllReservationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&reservation.GetAllReservationsResponse{")
	if this.Reservations != nil {
		s = append(s, "Reservations: "+fmt.Sprintf("%#v", this.Reservations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReservationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&reservation.GetReservationRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReservationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&reservation.GetReservationResponse{")
	if this.Reservation != nil {
		s = append(s, "Reservation: "+fmt.Sprintf("%#v", this.Reservation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddReservationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&reservation.AddReservationRequest{")
	if this.Reservation != nil {
		s = append(s, "Reservation: "+fmt.Sprintf("%#v", this.Reservation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddReservationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&reservation.AddReservationResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveReservationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&reservation.RemoveReservationRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveReservationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&reservation.RemoveReservationResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReservation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Reservation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reservation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.UserId))
	}
	if m.ShowId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.ShowId))
	}
	if len(m.Seats) > 0 {
		for _, msg := range m.Seats {
			dAtA[i] = 0x22
			i++
			i = encodeVarintReservation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Seat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Seat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Row != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.Row))
	}
	if m.Column != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.Column))
	}
	return i, nil
}

func (m *GetAllReservationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReservationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAllReservationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReservationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reservations) > 0 {
		for _, msg := range m.Reservations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReservation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetReservationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReservationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetReservationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReservationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reservation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.Reservation.Size()))
		n1, err1 := m.Reservation.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *AddReservationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReservationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reservation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.Reservation.Size()))
		n2, err2 := m.Reservation.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *AddReservationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReservationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RemoveReservationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveReservationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReservation(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RemoveReservationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveReservationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintReservation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Reservation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReservation(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovReservation(uint64(m.UserId))
	}
	if m.ShowId != 0 {
		n += 1 + sovReservation(uint64(m.ShowId))
	}
	if len(m.Seats) > 0 {
		for _, e := range m.Seats {
			l = e.Size()
			n += 1 + l + sovReservation(uint64(l))
		}
	}
	return n
}

func (m *Seat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Row != 0 {
		n += 1 + sovReservation(uint64(m.Row))
	}
	if m.Column != 0 {
		n += 1 + sovReservation(uint64(m.Column))
	}
	return n
}

func (m *GetAllReservationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllReservationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reservations) > 0 {
		for _, e := range m.Reservations {
			l = e.Size()
			n += 1 + l + sovReservation(uint64(l))
		}
	}
	return n
}

func (m *GetReservationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReservation(uint64(m.Id))
	}
	return n
}

func (m *GetReservationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovReservation(uint64(l))
	}
	return n
}

func (m *AddReservationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovReservation(uint64(l))
	}
	return n
}

func (m *AddReservationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveReservationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReservation(uint64(m.Id))
	}
	return n
}

func (m *RemoveReservationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovReservation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReservation(x uint64) (n int) {
	return sovReservation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Reservation) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSeats := "[]*Seat{"
	for _, f := range this.Seats {
		repeatedStringForSeats += strings.Replace(f.String(), "Seat", "Seat", 1) + ","
	}
	repeatedStringForSeats += "}"
	s := strings.Join([]string{`&Reservation{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`ShowId:` + fmt.Sprintf("%v", this.ShowId) + `,`,
		`Seats:` + repeatedStringForSeats + `,`,
		`}`,
	}, "")
	return s
}
func (this *Seat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Seat{`,
		`Row:` + fmt.Sprintf("%v", this.Row) + `,`,
		`Column:` + fmt.Sprintf("%v", this.Column) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAllReservationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAllReservationsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetAllReservationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReservations := "[]*Reservation{"
	for _, f := range this.Reservations {
		repeatedStringForReservations += strings.Replace(f.String(), "Reservation", "Reservation", 1) + ","
	}
	repeatedStringForReservations += "}"
	s := strings.Join([]string{`&GetAllReservationsResponse{`,
		`Reservations:` + repeatedStringForReservations + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReservationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReservationRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReservationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReservationResponse{`,
		`Reservation:` + strings.Replace(this.Reservation.String(), "Reservation", "Reservation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddReservationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddReservationRequest{`,
		`Reservation:` + strings.Replace(this.Reservation.String(), "Reservation", "Reservation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddReservationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddReservationResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveReservationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveReservationRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveReservationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveReservationResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringReservation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Reservation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reservation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reservation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowId", wireType)
			}
			m.ShowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReservation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReservation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seats = append(m.Seats, &Seat{})
			if err := m.Seats[len(m.Seats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Seat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Seat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Seat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			m.Row = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Row |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Column", wireType)
			}
			m.Column = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Column |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReservationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllReservationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllReservationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReservationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllReservationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllReservationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReservation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReservation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reservations = append(m.Reservations, &Reservation{})
			if err := m.Reservations[len(m.Reservations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReservationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReservationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReservationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReservationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReservation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReservation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &Reservation{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReservationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReservationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReservationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReservation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReservation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &Reservation{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReservationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveReservationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveReservationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveReservationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveReservationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReservation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReservation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReservation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReservation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReservation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReservation
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthReservation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReservation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReservation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthReservation
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReservation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReservation   = fmt.Errorf("proto: integer overflow")
)
