// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: show.proto

package show

import (
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Show struct {
	Id       int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	MovieId  int64  `protobuf:"varint,2,opt,name=MovieId,proto3" json:"MovieId,omitempty"`
	HallId   int64  `protobuf:"varint,3,opt,name=HallId,proto3" json:"HallId,omitempty"`
	DateTime string `protobuf:"bytes,4,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (m *Show) Reset()      { *m = Show{} }
func (*Show) ProtoMessage() {}
func (*Show) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{0}
}
func (m *Show) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Show) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Show.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Show) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Show.Merge(m, src)
}
func (m *Show) XXX_Size() int {
	return m.Size()
}
func (m *Show) XXX_DiscardUnknown() {
	xxx_messageInfo_Show.DiscardUnknown(m)
}

var xxx_messageInfo_Show proto.InternalMessageInfo

func (m *Show) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Show) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *Show) GetHallId() int64 {
	if m != nil {
		return m.HallId
	}
	return 0
}

func (m *Show) GetDateTime() string {
	if m != nil {
		return m.DateTime
	}
	return ""
}

type GetAllShowsRequest struct {
}

func (m *GetAllShowsRequest) Reset()      { *m = GetAllShowsRequest{} }
func (*GetAllShowsRequest) ProtoMessage() {}
func (*GetAllShowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{1}
}
func (m *GetAllShowsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllShowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllShowsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllShowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShowsRequest.Merge(m, src)
}
func (m *GetAllShowsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllShowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShowsRequest proto.InternalMessageInfo

type GetAllShowsResponse struct {
	Shows []*Show `protobuf:"bytes,1,rep,name=Shows,proto3" json:"Shows,omitempty"`
}

func (m *GetAllShowsResponse) Reset()      { *m = GetAllShowsResponse{} }
func (*GetAllShowsResponse) ProtoMessage() {}
func (*GetAllShowsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{2}
}
func (m *GetAllShowsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllShowsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllShowsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllShowsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllShowsResponse.Merge(m, src)
}
func (m *GetAllShowsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllShowsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllShowsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllShowsResponse proto.InternalMessageInfo

func (m *GetAllShowsResponse) GetShows() []*Show {
	if m != nil {
		return m.Shows
	}
	return nil
}

type GetShowRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GetShowRequest) Reset()      { *m = GetShowRequest{} }
func (*GetShowRequest) ProtoMessage() {}
func (*GetShowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{3}
}
func (m *GetShowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShowRequest.Merge(m, src)
}
func (m *GetShowRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetShowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetShowRequest proto.InternalMessageInfo

func (m *GetShowRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetShowResponse struct {
	Show *Show `protobuf:"bytes,1,opt,name=Show,proto3" json:"Show,omitempty"`
}

func (m *GetShowResponse) Reset()      { *m = GetShowResponse{} }
func (*GetShowResponse) ProtoMessage() {}
func (*GetShowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{4}
}
func (m *GetShowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetShowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetShowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetShowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetShowResponse.Merge(m, src)
}
func (m *GetShowResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetShowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetShowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetShowResponse proto.InternalMessageInfo

func (m *GetShowResponse) GetShow() *Show {
	if m != nil {
		return m.Show
	}
	return nil
}

type AddShowRequest struct {
	Show *Show `protobuf:"bytes,1,opt,name=show,proto3" json:"show,omitempty"`
}

func (m *AddShowRequest) Reset()      { *m = AddShowRequest{} }
func (*AddShowRequest) ProtoMessage() {}
func (*AddShowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{5}
}
func (m *AddShowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddShowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddShowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddShowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddShowRequest.Merge(m, src)
}
func (m *AddShowRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddShowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddShowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddShowRequest proto.InternalMessageInfo

func (m *AddShowRequest) GetShow() *Show {
	if m != nil {
		return m.Show
	}
	return nil
}

type AddShowResponse struct {
}

func (m *AddShowResponse) Reset()      { *m = AddShowResponse{} }
func (*AddShowResponse) ProtoMessage() {}
func (*AddShowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{6}
}
func (m *AddShowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddShowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddShowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddShowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddShowResponse.Merge(m, src)
}
func (m *AddShowResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddShowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddShowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddShowResponse proto.InternalMessageInfo

type RemoveShowRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *RemoveShowRequest) Reset()      { *m = RemoveShowRequest{} }
func (*RemoveShowRequest) ProtoMessage() {}
func (*RemoveShowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{7}
}
func (m *RemoveShowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveShowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveShowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveShowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShowRequest.Merge(m, src)
}
func (m *RemoveShowRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveShowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShowRequest proto.InternalMessageInfo

func (m *RemoveShowRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveShowResponse struct {
}

func (m *RemoveShowResponse) Reset()      { *m = RemoveShowResponse{} }
func (*RemoveShowResponse) ProtoMessage() {}
func (*RemoveShowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{8}
}
func (m *RemoveShowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveShowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveShowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveShowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShowResponse.Merge(m, src)
}
func (m *RemoveShowResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveShowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShowResponse proto.InternalMessageInfo

type RemoveShowsForHallRequest struct {
	HallId int64 `protobuf:"varint,1,opt,name=HallId,proto3" json:"HallId,omitempty"`
}

func (m *RemoveShowsForHallRequest) Reset()      { *m = RemoveShowsForHallRequest{} }
func (*RemoveShowsForHallRequest) ProtoMessage() {}
func (*RemoveShowsForHallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{9}
}
func (m *RemoveShowsForHallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveShowsForHallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveShowsForHallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveShowsForHallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShowsForHallRequest.Merge(m, src)
}
func (m *RemoveShowsForHallRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveShowsForHallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShowsForHallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShowsForHallRequest proto.InternalMessageInfo

func (m *RemoveShowsForHallRequest) GetHallId() int64 {
	if m != nil {
		return m.HallId
	}
	return 0
}

type RemoveShowsForHallResponse struct {
}

func (m *RemoveShowsForHallResponse) Reset()      { *m = RemoveShowsForHallResponse{} }
func (*RemoveShowsForHallResponse) ProtoMessage() {}
func (*RemoveShowsForHallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{10}
}
func (m *RemoveShowsForHallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveShowsForHallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveShowsForHallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveShowsForHallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShowsForHallResponse.Merge(m, src)
}
func (m *RemoveShowsForHallResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveShowsForHallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShowsForHallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShowsForHallResponse proto.InternalMessageInfo

type RemoveShowsForMovieRequest struct {
	MovieId int64 `protobuf:"varint,1,opt,name=MovieId,proto3" json:"MovieId,omitempty"`
}

func (m *RemoveShowsForMovieRequest) Reset()      { *m = RemoveShowsForMovieRequest{} }
func (*RemoveShowsForMovieRequest) ProtoMessage() {}
func (*RemoveShowsForMovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{11}
}
func (m *RemoveShowsForMovieRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveShowsForMovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveShowsForMovieRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveShowsForMovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShowsForMovieRequest.Merge(m, src)
}
func (m *RemoveShowsForMovieRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveShowsForMovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShowsForMovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShowsForMovieRequest proto.InternalMessageInfo

func (m *RemoveShowsForMovieRequest) GetMovieId() int64 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

type RemoveShowsForMovieResponse struct {
}

func (m *RemoveShowsForMovieResponse) Reset()      { *m = RemoveShowsForMovieResponse{} }
func (*RemoveShowsForMovieResponse) ProtoMessage() {}
func (*RemoveShowsForMovieResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_40dadfe47b432028, []int{12}
}
func (m *RemoveShowsForMovieResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveShowsForMovieResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveShowsForMovieResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveShowsForMovieResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveShowsForMovieResponse.Merge(m, src)
}
func (m *RemoveShowsForMovieResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveShowsForMovieResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveShowsForMovieResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveShowsForMovieResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Show)(nil), "show.Show")
	proto.RegisterType((*GetAllShowsRequest)(nil), "show.GetAllShowsRequest")
	proto.RegisterType((*GetAllShowsResponse)(nil), "show.GetAllShowsResponse")
	proto.RegisterType((*GetShowRequest)(nil), "show.GetShowRequest")
	proto.RegisterType((*GetShowResponse)(nil), "show.GetShowResponse")
	proto.RegisterType((*AddShowRequest)(nil), "show.AddShowRequest")
	proto.RegisterType((*AddShowResponse)(nil), "show.AddShowResponse")
	proto.RegisterType((*RemoveShowRequest)(nil), "show.RemoveShowRequest")
	proto.RegisterType((*RemoveShowResponse)(nil), "show.RemoveShowResponse")
	proto.RegisterType((*RemoveShowsForHallRequest)(nil), "show.RemoveShowsForHallRequest")
	proto.RegisterType((*RemoveShowsForHallResponse)(nil), "show.RemoveShowsForHallResponse")
	proto.RegisterType((*RemoveShowsForMovieRequest)(nil), "show.RemoveShowsForMovieRequest")
	proto.RegisterType((*RemoveShowsForMovieResponse)(nil), "show.RemoveShowsForMovieResponse")
}

func init() { proto.RegisterFile("show.proto", fileDescriptor_40dadfe47b432028) }

var fileDescriptor_40dadfe47b432028 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0x77, 0xe3, 0x70, 0x07, 0x13, 0x29, 0xa7, 0x9b, 0x0b, 0xb0, 0x67, 0x60, 0x31, 0x4b,
	0x93, 0xea, 0x04, 0x77, 0x08, 0x68, 0x83, 0x4e, 0x04, 0x17, 0x34, 0x0e, 0x0d, 0x12, 0x4d, 0xc0,
	0x2b, 0x25, 0x92, 0xc3, 0x86, 0xd8, 0x24, 0x2d, 0x8f, 0xc0, 0x63, 0xf0, 0x1e, 0x34, 0x94, 0x29,
	0x53, 0x12, 0xa7, 0xa1, 0xcc, 0x23, 0x20, 0xaf, 0xff, 0x64, 0xed, 0xf8, 0xd2, 0x79, 0xbf, 0x99,
	0xef, 0xdb, 0xd9, 0xf9, 0x49, 0x06, 0x08, 0x47, 0x6a, 0x71, 0x31, 0x9d, 0xa9, 0x48, 0x61, 0x33,
	0xf9, 0x16, 0x3e, 0x34, 0x07, 0x23, 0xb5, 0xc0, 0x36, 0x34, 0x5c, 0x9f, 0x51, 0x87, 0x76, 0x2d,
	0xaf, 0xe1, 0xfa, 0xc8, 0xe0, 0xf8, 0xbd, 0x9a, 0x8f, 0xa5, 0xeb, 0xb3, 0x86, 0x16, 0xf3, 0x23,
	0xde, 0x83, 0xa3, 0x77, 0xc3, 0x20, 0x70, 0x7d, 0x66, 0xe9, 0x42, 0x76, 0x42, 0x1b, 0x6e, 0x5f,
	0x0f, 0x23, 0xf9, 0x61, 0x3c, 0x91, 0xac, 0xe9, 0xd0, 0xee, 0x1d, 0xaf, 0x38, 0x8b, 0x0e, 0x60,
	0x5f, 0x46, 0xbd, 0x20, 0x48, 0xee, 0x0a, 0x3d, 0xf9, 0xed, 0xbb, 0x0c, 0x23, 0xf1, 0x0a, 0xce,
	0x4a, 0x6a, 0x38, 0x55, 0x5f, 0x43, 0x89, 0x0e, 0xdc, 0xd2, 0x02, 0xa3, 0x8e, 0xd5, 0x6d, 0x5d,
	0xc2, 0x85, 0x1e, 0x3a, 0x91, 0xbc, 0xb4, 0x20, 0x1c, 0x68, 0xf7, 0x65, 0xa4, 0x95, 0x34, 0xaa,
	0x3a, 0xbe, 0x78, 0x0e, 0x27, 0x45, 0x47, 0x16, 0xcb, 0xd3, 0x97, 0xea, 0xa6, 0x72, 0xaa, 0xd6,
	0xc5, 0x33, 0x68, 0xf7, 0x7c, 0xdf, 0x0c, 0xe5, 0xa0, 0x77, 0x54, 0xe7, 0xd0, 0xbb, 0x3b, 0x85,
	0x93, 0xc2, 0x91, 0x5e, 0x22, 0x9e, 0xc2, 0xa9, 0x27, 0x27, 0x6a, 0x2e, 0x0f, 0x0d, 0xd7, 0x01,
	0x34, 0x9b, 0x32, 0xeb, 0x15, 0x9c, 0xef, 0xd4, 0xf0, 0xad, 0x9a, 0x25, 0x7b, 0xcd, 0x23, 0x76,
	0x4b, 0xa7, 0xe6, 0xd2, 0xc5, 0x43, 0xb0, 0xeb, 0x4c, 0x59, 0xe4, 0xcb, 0x6a, 0x55, 0x33, 0xcc,
	0x33, 0x0d, 0xc4, 0xb4, 0x84, 0x58, 0x3c, 0x82, 0x07, 0xb5, 0xbe, 0x34, 0xf6, 0xf2, 0xb7, 0x05,
	0xad, 0xa4, 0x32, 0x90, 0xb3, 0xf9, 0xf8, 0x8b, 0xc4, 0x6b, 0x68, 0x19, 0x1c, 0x91, 0xa5, 0x8b,
	0xda, 0x07, 0x6e, 0x9f, 0xd7, 0x54, 0xb2, 0x51, 0x09, 0xbe, 0x86, 0xe3, 0x0c, 0x19, 0x76, 0x8a,
	0x3e, 0x63, 0x8d, 0xf6, 0xdd, 0x8a, 0x6a, 0x3a, 0x33, 0x0e, 0xb9, 0xb3, 0x0c, 0x32, 0x77, 0x56,
	0x61, 0x11, 0xec, 0x01, 0xec, 0x1e, 0x8a, 0xf7, 0xd3, 0xb6, 0x3d, 0x80, 0x36, 0xdb, 0x2f, 0x14,
	0x11, 0x1f, 0x4d, 0x98, 0x39, 0x01, 0x7c, 0x5c, 0x75, 0x54, 0x80, 0xda, 0xce, 0xcd, 0x0d, 0x45,
	0xf4, 0x27, 0x38, 0xab, 0xc1, 0x80, 0xb5, 0x56, 0x93, 0xac, 0xfd, 0xe4, 0x40, 0x47, 0x9e, 0xfe,
	0xe6, 0xc5, 0x72, 0xcd, 0xc9, 0x6a, 0xcd, 0xc9, 0x76, 0xcd, 0xe9, 0x8f, 0x98, 0xd3, 0x5f, 0x31,
	0xa7, 0x7f, 0x62, 0x4e, 0x97, 0x31, 0xa7, 0x7f, 0x63, 0x4e, 0xff, 0xc5, 0x9c, 0x6c, 0x63, 0x4e,
	0x7f, 0x6e, 0x38, 0x59, 0x6e, 0x38, 0x59, 0x6d, 0x38, 0xf9, 0x7c, 0xa4, 0x7f, 0x1e, 0x57, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x88, 0xb0, 0x1e, 0x4a, 0x04, 0x00, 0x00,
}

func (this *Show) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Show)
	if !ok {
		that2, ok := that.(Show)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.MovieId != that1.MovieId {
		return false
	}
	if this.HallId != that1.HallId {
		return false
	}
	if this.DateTime != that1.DateTime {
		return false
	}
	return true
}
func (this *GetAllShowsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllShowsRequest)
	if !ok {
		that2, ok := that.(GetAllShowsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAllShowsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllShowsResponse)
	if !ok {
		that2, ok := that.(GetAllShowsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Shows) != len(that1.Shows) {
		return false
	}
	for i := range this.Shows {
		if !this.Shows[i].Equal(that1.Shows[i]) {
			return false
		}
	}
	return true
}
func (this *GetShowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetShowRequest)
	if !ok {
		that2, ok := that.(GetShowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetShowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetShowResponse)
	if !ok {
		that2, ok := that.(GetShowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Show.Equal(that1.Show) {
		return false
	}
	return true
}
func (this *AddShowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddShowRequest)
	if !ok {
		that2, ok := that.(AddShowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Show.Equal(that1.Show) {
		return false
	}
	return true
}
func (this *AddShowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddShowResponse)
	if !ok {
		that2, ok := that.(AddShowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveShowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveShowRequest)
	if !ok {
		that2, ok := that.(RemoveShowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RemoveShowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveShowResponse)
	if !ok {
		that2, ok := that.(RemoveShowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveShowsForHallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveShowsForHallRequest)
	if !ok {
		that2, ok := that.(RemoveShowsForHallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HallId != that1.HallId {
		return false
	}
	return true
}
func (this *RemoveShowsForHallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveShowsForHallResponse)
	if !ok {
		that2, ok := that.(RemoveShowsForHallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveShowsForMovieRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveShowsForMovieRequest)
	if !ok {
		that2, ok := that.(RemoveShowsForMovieRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MovieId != that1.MovieId {
		return false
	}
	return true
}
func (this *RemoveShowsForMovieResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveShowsForMovieResponse)
	if !ok {
		that2, ok := that.(RemoveShowsForMovieResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Show) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&show.Show{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "MovieId: "+fmt.Sprintf("%#v", this.MovieId)+",\n")
	s = append(s, "HallId: "+fmt.Sprintf("%#v", this.HallId)+",\n")
	s = append(s, "DateTime: "+fmt.Sprintf("%#v", this.DateTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllShowsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&show.GetAllShowsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllShowsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&show.GetAllShowsResponse{")
	if this.Shows != nil {
		s = append(s, "Shows: "+fmt.Sprintf("%#v", this.Shows)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetShowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&show.GetShowRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetShowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&show.GetShowResponse{")
	if this.Show != nil {
		s = append(s, "Show: "+fmt.Sprintf("%#v", this.Show)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddShowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&show.AddShowRequest{")
	if this.Show != nil {
		s = append(s, "Show: "+fmt.Sprintf("%#v", this.Show)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddShowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&show.AddShowResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveShowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&show.RemoveShowRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveShowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&show.RemoveShowResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveShowsForHallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&show.RemoveShowsForHallRequest{")
	s = append(s, "HallId: "+fmt.Sprintf("%#v", this.HallId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveShowsForHallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&show.RemoveShowsForHallResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveShowsForMovieRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&show.RemoveShowsForMovieRequest{")
	s = append(s, "MovieId: "+fmt.Sprintf("%#v", this.MovieId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveShowsForMovieResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&show.RemoveShowsForMovieResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringShow(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Show) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Show) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.Id))
	}
	if m.MovieId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.MovieId))
	}
	if m.HallId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.HallId))
	}
	if len(m.DateTime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShow(dAtA, i, uint64(len(m.DateTime)))
		i += copy(dAtA[i:], m.DateTime)
	}
	return i, nil
}

func (m *GetAllShowsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllShowsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAllShowsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllShowsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Shows) > 0 {
		for _, msg := range m.Shows {
			dAtA[i] = 0xa
			i++
			i = encodeVarintShow(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetShowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetShowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Show != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.Show.Size()))
		n1, err1 := m.Show.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *AddShowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddShowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Show != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.Show.Size()))
		n2, err2 := m.Show.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *AddShowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddShowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RemoveShowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveShowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RemoveShowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveShowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RemoveShowsForHallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveShowsForHallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HallId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.HallId))
	}
	return i, nil
}

func (m *RemoveShowsForHallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveShowsForHallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RemoveShowsForMovieRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveShowsForMovieRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MovieId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShow(dAtA, i, uint64(m.MovieId))
	}
	return i, nil
}

func (m *RemoveShowsForMovieResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveShowsForMovieResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintShow(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Show) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShow(uint64(m.Id))
	}
	if m.MovieId != 0 {
		n += 1 + sovShow(uint64(m.MovieId))
	}
	if m.HallId != 0 {
		n += 1 + sovShow(uint64(m.HallId))
	}
	l = len(m.DateTime)
	if l > 0 {
		n += 1 + l + sovShow(uint64(l))
	}
	return n
}

func (m *GetAllShowsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllShowsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shows) > 0 {
		for _, e := range m.Shows {
			l = e.Size()
			n += 1 + l + sovShow(uint64(l))
		}
	}
	return n
}

func (m *GetShowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShow(uint64(m.Id))
	}
	return n
}

func (m *GetShowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Show != nil {
		l = m.Show.Size()
		n += 1 + l + sovShow(uint64(l))
	}
	return n
}

func (m *AddShowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Show != nil {
		l = m.Show.Size()
		n += 1 + l + sovShow(uint64(l))
	}
	return n
}

func (m *AddShowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveShowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShow(uint64(m.Id))
	}
	return n
}

func (m *RemoveShowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveShowsForHallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HallId != 0 {
		n += 1 + sovShow(uint64(m.HallId))
	}
	return n
}

func (m *RemoveShowsForHallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveShowsForMovieRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MovieId != 0 {
		n += 1 + sovShow(uint64(m.MovieId))
	}
	return n
}

func (m *RemoveShowsForMovieResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovShow(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShow(x uint64) (n int) {
	return sovShow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Show) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Show{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`MovieId:` + fmt.Sprintf("%v", this.MovieId) + `,`,
		`HallId:` + fmt.Sprintf("%v", this.HallId) + `,`,
		`DateTime:` + fmt.Sprintf("%v", this.DateTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAllShowsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAllShowsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetAllShowsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForShows := "[]*Show{"
	for _, f := range this.Shows {
		repeatedStringForShows += strings.Replace(f.String(), "Show", "Show", 1) + ","
	}
	repeatedStringForShows += "}"
	s := strings.Join([]string{`&GetAllShowsResponse{`,
		`Shows:` + repeatedStringForShows + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetShowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetShowRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetShowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetShowResponse{`,
		`Show:` + strings.Replace(this.Show.String(), "Show", "Show", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddShowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddShowRequest{`,
		`Show:` + strings.Replace(this.Show.String(), "Show", "Show", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddShowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddShowResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveShowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveShowRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveShowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveShowResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveShowsForHallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveShowsForHallRequest{`,
		`HallId:` + fmt.Sprintf("%v", this.HallId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveShowsForHallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveShowsForHallResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveShowsForMovieRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveShowsForMovieRequest{`,
		`MovieId:` + fmt.Sprintf("%v", this.MovieId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveShowsForMovieResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveShowsForMovieResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringShow(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Show) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Show: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Show: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovieId", wireType)
			}
			m.MovieId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MovieId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallId", wireType)
			}
			m.HallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthShow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllShowsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllShowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllShowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllShowsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllShowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllShowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shows = append(m.Shows, &Show{})
			if err := m.Shows[len(m.Shows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Show == nil {
				m.Show = &Show{}
			}
			if err := m.Show.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddShowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddShowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddShowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Show == nil {
				m.Show = &Show{}
			}
			if err := m.Show.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddShowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddShowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddShowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveShowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveShowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveShowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveShowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveShowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveShowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveShowsForHallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveShowsForHallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveShowsForHallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HallId", wireType)
			}
			m.HallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveShowsForHallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveShowsForHallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveShowsForHallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveShowsForMovieRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveShowsForMovieRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveShowsForMovieRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovieId", wireType)
			}
			m.MovieId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MovieId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveShowsForMovieResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveShowsForMovieResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveShowsForMovieResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShow
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthShow
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShow
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShow(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthShow
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShow = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShow   = fmt.Errorf("proto: integer overflow")
)
