// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: reservationservice/proto/reservation/reservation.proto

package reservation

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ReservationService service

type ReservationService interface {
	GetAllReservations(ctx context.Context, in *GetAllReservationsRequest, opts ...client.CallOption) (*GetAllReservationsResponse, error)
	GetReservation(ctx context.Context, in *GetReservationRequest, opts ...client.CallOption) (*GetReservationResponse, error)
	RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...client.CallOption) (*RemoveReservationResponse, error)
	GetReservationsForUser(ctx context.Context, in *GetReservationsForUserRequest, opts ...client.CallOption) (*GetReservationsForUserResponse, error)
	RequestReservation(ctx context.Context, in *RequestReservationRequest, opts ...client.CallOption) (*RequestReservationResponse, error)
	ActivateReservation(ctx context.Context, in *ActivateReservationRequest, opts ...client.CallOption) (*ActivateReservationResponse, error)
}

type reservationService struct {
	c    client.Client
	name string
}

func NewReservationService(name string, c client.Client) ReservationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "reservation"
	}
	return &reservationService{
		c:    c,
		name: name,
	}
}

func (c *reservationService) GetAllReservations(ctx context.Context, in *GetAllReservationsRequest, opts ...client.CallOption) (*GetAllReservationsResponse, error) {
	req := c.c.NewRequest(c.name, "ReservationService.GetAllReservations", in)
	out := new(GetAllReservationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) GetReservation(ctx context.Context, in *GetReservationRequest, opts ...client.CallOption) (*GetReservationResponse, error) {
	req := c.c.NewRequest(c.name, "ReservationService.GetReservation", in)
	out := new(GetReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...client.CallOption) (*RemoveReservationResponse, error) {
	req := c.c.NewRequest(c.name, "ReservationService.RemoveReservation", in)
	out := new(RemoveReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) GetReservationsForUser(ctx context.Context, in *GetReservationsForUserRequest, opts ...client.CallOption) (*GetReservationsForUserResponse, error) {
	req := c.c.NewRequest(c.name, "ReservationService.GetReservationsForUser", in)
	out := new(GetReservationsForUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) RequestReservation(ctx context.Context, in *RequestReservationRequest, opts ...client.CallOption) (*RequestReservationResponse, error) {
	req := c.c.NewRequest(c.name, "ReservationService.RequestReservation", in)
	out := new(RequestReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) ActivateReservation(ctx context.Context, in *ActivateReservationRequest, opts ...client.CallOption) (*ActivateReservationResponse, error) {
	req := c.c.NewRequest(c.name, "ReservationService.ActivateReservation", in)
	out := new(ActivateReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReservationService service

type ReservationServiceHandler interface {
	GetAllReservations(context.Context, *GetAllReservationsRequest, *GetAllReservationsResponse) error
	GetReservation(context.Context, *GetReservationRequest, *GetReservationResponse) error
	RemoveReservation(context.Context, *RemoveReservationRequest, *RemoveReservationResponse) error
	GetReservationsForUser(context.Context, *GetReservationsForUserRequest, *GetReservationsForUserResponse) error
	RequestReservation(context.Context, *RequestReservationRequest, *RequestReservationResponse) error
	ActivateReservation(context.Context, *ActivateReservationRequest, *ActivateReservationResponse) error
}

func RegisterReservationServiceHandler(s server.Server, hdlr ReservationServiceHandler, opts ...server.HandlerOption) error {
	type reservationService interface {
		GetAllReservations(ctx context.Context, in *GetAllReservationsRequest, out *GetAllReservationsResponse) error
		GetReservation(ctx context.Context, in *GetReservationRequest, out *GetReservationResponse) error
		RemoveReservation(ctx context.Context, in *RemoveReservationRequest, out *RemoveReservationResponse) error
		GetReservationsForUser(ctx context.Context, in *GetReservationsForUserRequest, out *GetReservationsForUserResponse) error
		RequestReservation(ctx context.Context, in *RequestReservationRequest, out *RequestReservationResponse) error
		ActivateReservation(ctx context.Context, in *ActivateReservationRequest, out *ActivateReservationResponse) error
	}
	type ReservationService struct {
		reservationService
	}
	h := &reservationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ReservationService{h}, opts...))
}

type reservationServiceHandler struct {
	ReservationServiceHandler
}

func (h *reservationServiceHandler) GetAllReservations(ctx context.Context, in *GetAllReservationsRequest, out *GetAllReservationsResponse) error {
	return h.ReservationServiceHandler.GetAllReservations(ctx, in, out)
}

func (h *reservationServiceHandler) GetReservation(ctx context.Context, in *GetReservationRequest, out *GetReservationResponse) error {
	return h.ReservationServiceHandler.GetReservation(ctx, in, out)
}

func (h *reservationServiceHandler) RemoveReservation(ctx context.Context, in *RemoveReservationRequest, out *RemoveReservationResponse) error {
	return h.ReservationServiceHandler.RemoveReservation(ctx, in, out)
}

func (h *reservationServiceHandler) GetReservationsForUser(ctx context.Context, in *GetReservationsForUserRequest, out *GetReservationsForUserResponse) error {
	return h.ReservationServiceHandler.GetReservationsForUser(ctx, in, out)
}

func (h *reservationServiceHandler) RequestReservation(ctx context.Context, in *RequestReservationRequest, out *RequestReservationResponse) error {
	return h.ReservationServiceHandler.RequestReservation(ctx, in, out)
}

func (h *reservationServiceHandler) ActivateReservation(ctx context.Context, in *ActivateReservationRequest, out *ActivateReservationResponse) error {
	return h.ReservationServiceHandler.ActivateReservation(ctx, in, out)
}
