// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: movieservice/proto/movie/movie.proto

package movie

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MovieService service

type MovieService interface {
	GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, opts ...client.CallOption) (*GetAllMoviesResponse, error)
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...client.CallOption) (*GetMovieResponse, error)
	AddMovie(ctx context.Context, in *AddMovieRequest, opts ...client.CallOption) (*AddMovieResponse, error)
	RemoveMovie(ctx context.Context, in *RemoveMovieRequest, opts ...client.CallOption) (*RemoveMovieResponse, error)
}

type movieService struct {
	c    client.Client
	name string
}

func NewMovieService(name string, c client.Client) MovieService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "movie"
	}
	return &movieService{
		c:    c,
		name: name,
	}
}

func (c *movieService) GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, opts ...client.CallOption) (*GetAllMoviesResponse, error) {
	req := c.c.NewRequest(c.name, "MovieService.GetAllMovies", in)
	out := new(GetAllMoviesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieService) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...client.CallOption) (*GetMovieResponse, error) {
	req := c.c.NewRequest(c.name, "MovieService.GetMovie", in)
	out := new(GetMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieService) AddMovie(ctx context.Context, in *AddMovieRequest, opts ...client.CallOption) (*AddMovieResponse, error) {
	req := c.c.NewRequest(c.name, "MovieService.AddMovie", in)
	out := new(AddMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieService) RemoveMovie(ctx context.Context, in *RemoveMovieRequest, opts ...client.CallOption) (*RemoveMovieResponse, error) {
	req := c.c.NewRequest(c.name, "MovieService.RemoveMovie", in)
	out := new(RemoveMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MovieService service

type MovieServiceHandler interface {
	GetAllMovies(context.Context, *GetAllMoviesRequest, *GetAllMoviesResponse) error
	GetMovie(context.Context, *GetMovieRequest, *GetMovieResponse) error
	AddMovie(context.Context, *AddMovieRequest, *AddMovieResponse) error
	RemoveMovie(context.Context, *RemoveMovieRequest, *RemoveMovieResponse) error
}

func RegisterMovieServiceHandler(s server.Server, hdlr MovieServiceHandler, opts ...server.HandlerOption) error {
	type movieService interface {
		GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, out *GetAllMoviesResponse) error
		GetMovie(ctx context.Context, in *GetMovieRequest, out *GetMovieResponse) error
		AddMovie(ctx context.Context, in *AddMovieRequest, out *AddMovieResponse) error
		RemoveMovie(ctx context.Context, in *RemoveMovieRequest, out *RemoveMovieResponse) error
	}
	type MovieService struct {
		movieService
	}
	h := &movieServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MovieService{h}, opts...))
}

type movieServiceHandler struct {
	MovieServiceHandler
}

func (h *movieServiceHandler) GetAllMovies(ctx context.Context, in *GetAllMoviesRequest, out *GetAllMoviesResponse) error {
	return h.MovieServiceHandler.GetAllMovies(ctx, in, out)
}

func (h *movieServiceHandler) GetMovie(ctx context.Context, in *GetMovieRequest, out *GetMovieResponse) error {
	return h.MovieServiceHandler.GetMovie(ctx, in, out)
}

func (h *movieServiceHandler) AddMovie(ctx context.Context, in *AddMovieRequest, out *AddMovieResponse) error {
	return h.MovieServiceHandler.AddMovie(ctx, in, out)
}

func (h *movieServiceHandler) RemoveMovie(ctx context.Context, in *RemoveMovieRequest, out *RemoveMovieResponse) error {
	return h.MovieServiceHandler.RemoveMovie(ctx, in, out)
}
