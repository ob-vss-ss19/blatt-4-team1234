// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hall.proto

package hall

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Hall struct {
	Id      int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Rows    int64  `protobuf:"varint,3,opt,name=Rows,proto3" json:"Rows,omitempty"`
	Columns int64  `protobuf:"varint,4,opt,name=Columns,proto3" json:"Columns,omitempty"`
}

func (m *Hall) Reset()      { *m = Hall{} }
func (*Hall) ProtoMessage() {}
func (*Hall) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{0}
}
func (m *Hall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hall.Merge(m, src)
}
func (m *Hall) XXX_Size() int {
	return m.Size()
}
func (m *Hall) XXX_DiscardUnknown() {
	xxx_messageInfo_Hall.DiscardUnknown(m)
}

var xxx_messageInfo_Hall proto.InternalMessageInfo

func (m *Hall) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hall) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hall) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *Hall) GetColumns() int64 {
	if m != nil {
		return m.Columns
	}
	return 0
}

type GetAllHallsRequest struct {
}

func (m *GetAllHallsRequest) Reset()      { *m = GetAllHallsRequest{} }
func (*GetAllHallsRequest) ProtoMessage() {}
func (*GetAllHallsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{1}
}
func (m *GetAllHallsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllHallsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllHallsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllHallsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllHallsRequest.Merge(m, src)
}
func (m *GetAllHallsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllHallsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllHallsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllHallsRequest proto.InternalMessageInfo

type GetAllHallsResponse struct {
	Halls []*Hall `protobuf:"bytes,1,rep,name=Halls,proto3" json:"Halls,omitempty"`
}

func (m *GetAllHallsResponse) Reset()      { *m = GetAllHallsResponse{} }
func (*GetAllHallsResponse) ProtoMessage() {}
func (*GetAllHallsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{2}
}
func (m *GetAllHallsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllHallsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllHallsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllHallsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllHallsResponse.Merge(m, src)
}
func (m *GetAllHallsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllHallsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllHallsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllHallsResponse proto.InternalMessageInfo

func (m *GetAllHallsResponse) GetHalls() []*Hall {
	if m != nil {
		return m.Halls
	}
	return nil
}

type GetHallRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *GetHallRequest) Reset()      { *m = GetHallRequest{} }
func (*GetHallRequest) ProtoMessage() {}
func (*GetHallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{3}
}
func (m *GetHallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHallRequest.Merge(m, src)
}
func (m *GetHallRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHallRequest proto.InternalMessageInfo

func (m *GetHallRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetHallResponse struct {
	Hall *Hall `protobuf:"bytes,1,opt,name=Hall,proto3" json:"Hall,omitempty"`
}

func (m *GetHallResponse) Reset()      { *m = GetHallResponse{} }
func (*GetHallResponse) ProtoMessage() {}
func (*GetHallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{4}
}
func (m *GetHallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHallResponse.Merge(m, src)
}
func (m *GetHallResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHallResponse proto.InternalMessageInfo

func (m *GetHallResponse) GetHall() *Hall {
	if m != nil {
		return m.Hall
	}
	return nil
}

type AddHallRequest struct {
	Hall *Hall `protobuf:"bytes,1,opt,name=Hall,proto3" json:"Hall,omitempty"`
}

func (m *AddHallRequest) Reset()      { *m = AddHallRequest{} }
func (*AddHallRequest) ProtoMessage() {}
func (*AddHallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{5}
}
func (m *AddHallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHallRequest.Merge(m, src)
}
func (m *AddHallRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddHallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddHallRequest proto.InternalMessageInfo

func (m *AddHallRequest) GetHall() *Hall {
	if m != nil {
		return m.Hall
	}
	return nil
}

type AddHallResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *AddHallResponse) Reset()      { *m = AddHallResponse{} }
func (*AddHallResponse) ProtoMessage() {}
func (*AddHallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{6}
}
func (m *AddHallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHallResponse.Merge(m, src)
}
func (m *AddHallResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddHallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddHallResponse proto.InternalMessageInfo

func (m *AddHallResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveHallRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *RemoveHallRequest) Reset()      { *m = RemoveHallRequest{} }
func (*RemoveHallRequest) ProtoMessage() {}
func (*RemoveHallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{7}
}
func (m *RemoveHallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveHallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveHallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveHallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveHallRequest.Merge(m, src)
}
func (m *RemoveHallRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveHallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveHallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveHallRequest proto.InternalMessageInfo

func (m *RemoveHallRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveHallResponse struct {
}

func (m *RemoveHallResponse) Reset()      { *m = RemoveHallResponse{} }
func (*RemoveHallResponse) ProtoMessage() {}
func (*RemoveHallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e141f6d4a8804e5, []int{8}
}
func (m *RemoveHallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveHallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveHallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveHallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveHallResponse.Merge(m, src)
}
func (m *RemoveHallResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveHallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveHallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveHallResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Hall)(nil), "hall.Hall")
	proto.RegisterType((*GetAllHallsRequest)(nil), "hall.GetAllHallsRequest")
	proto.RegisterType((*GetAllHallsResponse)(nil), "hall.GetAllHallsResponse")
	proto.RegisterType((*GetHallRequest)(nil), "hall.GetHallRequest")
	proto.RegisterType((*GetHallResponse)(nil), "hall.GetHallResponse")
	proto.RegisterType((*AddHallRequest)(nil), "hall.AddHallRequest")
	proto.RegisterType((*AddHallResponse)(nil), "hall.AddHallResponse")
	proto.RegisterType((*RemoveHallRequest)(nil), "hall.RemoveHallRequest")
	proto.RegisterType((*RemoveHallResponse)(nil), "hall.RemoveHallResponse")
}

func init() { proto.RegisterFile("hall.proto", fileDescriptor_4e141f6d4a8804e5) }

var fileDescriptor_4e141f6d4a8804e5 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x31, 0x4f, 0xf2, 0x50,
	0x14, 0x7d, 0xaf, 0xf4, 0xfb, 0x88, 0x97, 0x04, 0xe2, 0x15, 0xe3, 0x93, 0xe1, 0xa6, 0x3e, 0x17,
	0x26, 0xa2, 0x68, 0xa2, 0x2b, 0x6a, 0x82, 0x2c, 0x0e, 0x75, 0x71, 0x45, 0xfb, 0x12, 0x4d, 0x0a,
	0x45, 0x5a, 0x70, 0x75, 0x76, 0xf2, 0x67, 0xf8, 0x53, 0x1c, 0x19, 0x19, 0xa5, 0x2c, 0x8e, 0xfc,
	0x04, 0xd3, 0xd7, 0x16, 0x4b, 0x31, 0xba, 0xdd, 0x9e, 0x7b, 0xce, 0xe9, 0xb9, 0x27, 0x0f, 0xe0,
	0xbe, 0xeb, 0xba, 0x8d, 0xc1, 0xd0, 0x0b, 0x3c, 0x34, 0xa3, 0x59, 0xde, 0x80, 0x79, 0xd9, 0x75,
	0x5d, 0x2c, 0x83, 0xd1, 0x71, 0x04, 0xb7, 0x78, 0xbd, 0x60, 0x1b, 0x1d, 0x07, 0x11, 0xcc, 0xab,
	0x6e, 0x4f, 0x09, 0xc3, 0xe2, 0xf5, 0x0d, 0x5b, 0xcf, 0x11, 0x66, 0x7b, 0x4f, 0xbe, 0x28, 0x68,
	0x96, 0x9e, 0x51, 0x40, 0xf1, 0xdc, 0x73, 0x47, 0xbd, 0xbe, 0x2f, 0x4c, 0x0d, 0xa7, 0x9f, 0xb2,
	0x0a, 0xd8, 0x56, 0x41, 0xcb, 0x75, 0x23, 0x7f, 0xdf, 0x56, 0x8f, 0x23, 0xe5, 0x07, 0xf2, 0x04,
	0xb6, 0x56, 0x50, 0x7f, 0xe0, 0xf5, 0x7d, 0x85, 0x16, 0xfc, 0xd3, 0x80, 0xe0, 0x56, 0xa1, 0x5e,
	0x6a, 0x42, 0x43, 0x07, 0x8d, 0x20, 0x3b, 0x5e, 0x48, 0x0b, 0xca, 0x6d, 0x15, 0x68, 0x24, 0xb6,
	0xca, 0x47, 0x96, 0x87, 0x50, 0x59, 0x32, 0x12, 0x5b, 0x8a, 0xaf, 0xd3, 0xa4, 0x55, 0x57, 0x8d,
	0xcb, 0x03, 0x28, 0xb7, 0x1c, 0x27, 0x6b, 0xfa, 0x97, 0x62, 0x0f, 0x2a, 0x4b, 0x45, 0xf2, 0x93,
	0x7c, 0x8e, 0x7d, 0xd8, 0xb4, 0x55, 0xcf, 0x1b, 0xab, 0xdf, 0xc2, 0x56, 0x01, 0xb3, 0xa4, 0xd8,
	0xaa, 0xf9, 0x62, 0x40, 0x29, 0x02, 0xae, 0xd5, 0x70, 0xfc, 0x70, 0xa7, 0xf0, 0x02, 0x4a, 0x99,
	0xb6, 0x50, 0xc4, 0x71, 0xd6, 0x6b, 0xad, 0xed, 0xfe, 0xb0, 0x89, 0x3d, 0x25, 0xc3, 0x53, 0x28,
	0x26, 0xc5, 0x60, 0x75, 0xc9, 0xcb, 0x84, 0xab, 0x6d, 0xe7, 0xd0, 0xac, 0x32, 0xb9, 0x36, 0x55,
	0xae, 0xd6, 0x95, 0x2a, 0x73, 0x95, 0x48, 0x86, 0x2d, 0x80, 0xef, 0xfb, 0x70, 0x27, 0xa6, 0xad,
	0xd5, 0x52, 0x13, 0xeb, 0x8b, 0xd4, 0xe2, 0xec, 0x78, 0x32, 0x23, 0x36, 0x9d, 0x11, 0x5b, 0xcc,
	0x88, 0x3f, 0x87, 0xc4, 0xdf, 0x42, 0xe2, 0xef, 0x21, 0xf1, 0x49, 0x48, 0xfc, 0x23, 0x24, 0xfe,
	0x19, 0x12, 0x5b, 0x84, 0xc4, 0x5f, 0xe7, 0xc4, 0x26, 0x73, 0x62, 0xd3, 0x39, 0xb1, 0xdb, 0xff,
	0xfa, 0x75, 0x1f, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0xed, 0x53, 0xd6, 0xb3, 0xeb, 0x02, 0x00,
	0x00,
}

func (this *Hall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hall)
	if !ok {
		that2, ok := that.(Hall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	if this.Columns != that1.Columns {
		return false
	}
	return true
}
func (this *GetAllHallsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllHallsRequest)
	if !ok {
		that2, ok := that.(GetAllHallsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAllHallsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAllHallsResponse)
	if !ok {
		that2, ok := that.(GetAllHallsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Halls) != len(that1.Halls) {
		return false
	}
	for i := range this.Halls {
		if !this.Halls[i].Equal(that1.Halls[i]) {
			return false
		}
	}
	return true
}
func (this *GetHallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHallRequest)
	if !ok {
		that2, ok := that.(GetHallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetHallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHallResponse)
	if !ok {
		that2, ok := that.(GetHallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hall.Equal(that1.Hall) {
		return false
	}
	return true
}
func (this *AddHallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddHallRequest)
	if !ok {
		that2, ok := that.(AddHallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hall.Equal(that1.Hall) {
		return false
	}
	return true
}
func (this *AddHallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddHallResponse)
	if !ok {
		that2, ok := that.(AddHallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RemoveHallRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveHallRequest)
	if !ok {
		that2, ok := that.(RemoveHallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RemoveHallResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveHallResponse)
	if !ok {
		that2, ok := that.(RemoveHallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Hall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&hall.Hall{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllHallsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&hall.GetAllHallsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAllHallsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hall.GetAllHallsResponse{")
	if this.Halls != nil {
		s = append(s, "Halls: "+fmt.Sprintf("%#v", this.Halls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetHallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hall.GetHallRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetHallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hall.GetHallResponse{")
	if this.Hall != nil {
		s = append(s, "Hall: "+fmt.Sprintf("%#v", this.Hall)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddHallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hall.AddHallRequest{")
	if this.Hall != nil {
		s = append(s, "Hall: "+fmt.Sprintf("%#v", this.Hall)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddHallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hall.AddHallResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveHallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&hall.RemoveHallRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveHallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&hall.RemoveHallResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHall(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Hall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Rows != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Rows))
	}
	if m.Columns != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Columns))
	}
	return i, nil
}

func (m *GetAllHallsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllHallsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAllHallsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllHallsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Halls) > 0 {
		for _, msg := range m.Halls {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHall(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetHallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetHallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hall != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Hall.Size()))
		n1, err1 := m.Hall.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *AddHallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hall != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Hall.Size()))
		n2, err2 := m.Hall.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *AddHallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RemoveHallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveHallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *RemoveHallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveHallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintHall(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Hall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHall(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	if m.Rows != 0 {
		n += 1 + sovHall(uint64(m.Rows))
	}
	if m.Columns != 0 {
		n += 1 + sovHall(uint64(m.Columns))
	}
	return n
}

func (m *GetAllHallsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllHallsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Halls) > 0 {
		for _, e := range m.Halls {
			l = e.Size()
			n += 1 + l + sovHall(uint64(l))
		}
	}
	return n
}

func (m *GetHallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHall(uint64(m.Id))
	}
	return n
}

func (m *GetHallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hall != nil {
		l = m.Hall.Size()
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}

func (m *AddHallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hall != nil {
		l = m.Hall.Size()
		n += 1 + l + sovHall(uint64(l))
	}
	return n
}

func (m *AddHallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHall(uint64(m.Id))
	}
	return n
}

func (m *RemoveHallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHall(uint64(m.Id))
	}
	return n
}

func (m *RemoveHallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovHall(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHall(x uint64) (n int) {
	return sovHall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Hall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Hall{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`Columns:` + fmt.Sprintf("%v", this.Columns) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAllHallsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAllHallsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetAllHallsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHalls := "[]*Hall{"
	for _, f := range this.Halls {
		repeatedStringForHalls += strings.Replace(f.String(), "Hall", "Hall", 1) + ","
	}
	repeatedStringForHalls += "}"
	s := strings.Join([]string{`&GetAllHallsResponse{`,
		`Halls:` + repeatedStringForHalls + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHallRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHallResponse{`,
		`Hall:` + strings.Replace(this.Hall.String(), "Hall", "Hall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddHallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddHallRequest{`,
		`Hall:` + strings.Replace(this.Hall.String(), "Hall", "Hall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddHallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddHallResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveHallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveHallRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveHallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveHallResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringHall(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Hall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			m.Columns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Columns |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllHallsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllHallsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllHallsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllHallsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllHallsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllHallsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Halls = append(m.Halls, &Hall{})
			if err := m.Halls[len(m.Halls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hall == nil {
				m.Hall = &Hall{}
			}
			if err := m.Hall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hall == nil {
				m.Hall = &Hall{}
			}
			if err := m.Hall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveHallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveHallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveHallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveHallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveHallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveHallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHall
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHall
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHall
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHall(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHall
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHall = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHall   = fmt.Errorf("proto: integer overflow")
)
